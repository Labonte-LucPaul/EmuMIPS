Language emu_mips;

Lexer

    digit = '0'..'9' ;
    hex = '0x' digit+ ;
    number = ('-'? digit+) | (hex) ;
   
    str = ('a'..'z') | ('A'..'Z') ;
    string = '_'* str+ (str | digit | '_')* ;
    
    console_string = '"' (Any - '"')* '"' ;
 
    register = '$a3' | '$a1' | '$a2' | '$at' | '$a0' | '$zero' | '$t5' | '$t4' | '$t7' | '$t6' | '$t1' | '$t0' | '$t3' | '$t2' | '$t9' | '$t8' | '$v3' | '$v0' | '$ra' | '$k0' | '$gp' | '$k1' | '$s6' | '$s5' | '$s4' | '$s3' | '$s2' | '$s1' | '$s0' | '$sp' | '$fp' | '$s7' ; 
    eol = #10 | #13 | #10 #13 ;
    
    blank = ' ' | #10 | #13 | #9 ;
    line_comment = '#' (Any - (#10|#13))* eol? ;

Ignored
    blank, 
    line_comment ;
    
Parser

    stmts = {many:} stmt stmts |
            {one:} stmt ;

        
    stmt = {add:} 'add' reg_expr |
           {addi:} 'addi' imm_expr |
           {addu:} 'addu' reg_expr |
           {addiu:} 'addiu' imm_expru |
           {sub:} 'sub' reg_expr |
           {subu:} 'subu' reg_expr |
           {and:} 'and' reg_expr |
           {andi:} 'andi' imm_expr |
           {or:} 'or' reg_expr |
           {ori:} 'ori' imm_expr |
           {nor:} 'nor' reg_expr |
           {xor:} 'xor' reg_expr |
           {xori:} 'xori' imm_expr |
           {slt:} 'slt' reg_expr |
           {slti:} 'slti' imm_expr |
           {sltu:} 'sltu' imm_expr |
           {sltiu:} 'sltiu' imm_expru |
           {sll:} 'sll' shift |
           {srl:} 'srl' shift |
           {beq:} 'beq' rs ',' rt ',' string |
           {bne:} 'bne' rs ',' rt ',' string |
           {lbu:} 'lbu' array |
           {lb:} 'lb' array |
           {lhu:} 'lhu' array |
           {ll:} 'll' array |
           {lui:} 'lui' rt ',' number |
           {lh:} 'lh' array |
           {lw:} 'lw' array |
           {sb:} 'sb' array |
           {sc:} 'sc' array |
           {sh:} 'sh' array |
           {sw:} 'sw' array |
           {lbl:} string ':' |
           {jmp:} 'j' string |
           {jmpreg:} 'jr' rs |
           {jmplnk:} 'jal' string |
           {data:} '.data' common_datas |
           {text:} '.text' |
           {globl:} '.globl' string |
           {syscall:} 'syscall' |
           {mov:} 'mov' register ',' register |
           {la:} 'la' register ',' string |
           {li:} 'li' register ',' number ;

    reg_expr = rd ',' rs ',' rt ;
    imm_expr = rt ',' rs ',' number ;
    imm_expru = rt ',' rs ',' number ;
    shift = rd ',' rt ',' number ;
    array = rt ',' number '(' rs ')' ;

    rs = register ;
    rt = register ;
    rd = register ;


    common_datas = {many:} common_data common_datas |
                   {one:} common_data ;

    common_data = {word:} '.word' directives_qtes |
           {half:} '.half' directives_qtes |
           {byte:} '.byte' directives_qtes |
           {ascii:} '.ascii' console_string |
           {asciiz:} '.asciiz' console_string |
           {float:} '.float' directives_qtes |
           {double:} '.double' directives_qtes |
           {space:} '.space' number |
           {align:} '.align' number |
           {lbl:} string ';' ; // Crappy but will do for now ;(   

    directives_qtes = directives_qte ',' directives_qtes | directives_qte ;
    directives_qte = {dirqt:} number ;

