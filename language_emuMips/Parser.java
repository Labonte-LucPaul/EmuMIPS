/* This file was generated by SableCC ( http://sablecc.org ). */

package language_emuMips;

import java.io.*;
import java.util.*;

public class Parser {

  private final Lexer lexer;
  private final ParseStack stack = new ParseStack();

  public Parser(Reader reader) {
    this.lexer = new Lexer(reader);
  }

  public Node parse()
      throws ParserException, LexerException, IOException {

    Node tree = null;
    while(tree == null) {
      tree = stack.getState().apply(this);
    }

    return tree;
  }

  ParseStack getStack() {
    return this.stack;
  }

  private LinkedList<Token> lookList = new LinkedList<Token>();

  Token look(int distance)
      throws LexerException, IOException {
    while(lookList.size() < distance) {
      lookList.addLast(lexer.next());
    }
    return lookList.get(distance - 1);
  }

  void shift()
      throws ParserException, LexerException, IOException {
    Token token;
    if(lookList.size() > 0) {
      token = lookList.removeFirst();
    }
    else {
      token = lexer.next();
    }
    stack.push(token, stack.getState().getTarget(token));
  }
}

class ParseStack {
  private ParseStackEntry stack = new ParseStackEntry(null, null, L_0.instance);
  private ParseStackEntry freeList;

  void push(Node node, LRState state) {
    ParseStackEntry entry;
    if(freeList != null) {
      entry = freeList;
      freeList = freeList.previous;
      entry.set(stack, node, state);
    }
    else {
      entry = new ParseStackEntry(stack, node, state);
    }
    stack = entry;
  }

  LRState getState() {
    return stack.state;
  }

  Node pop() {
    Node node = stack.node;
    ParseStackEntry entry = stack;
    stack = stack.previous;
    entry.set(freeList, null, null);
    freeList = entry;
    return node;
  }

  private static class ParseStackEntry {
    ParseStackEntry previous;
    Node node;
    LRState state;

    ParseStackEntry(
        ParseStackEntry previous,
        Node node,
        LRState state) {
     this.previous = previous;
     this.node = node;
     this.state = state;
    }

    void set(
        ParseStackEntry previous,
        Node node,
        LRState state) {
     this.previous = previous;
     this.node = node;
     this.state = state;
   }
  }
}

abstract class LRState {

  abstract Node apply(Parser parser)
      throws ParserException, LexerException, IOException;
  abstract LRState getTarget(Node node)
      throws ParserException, LexerException, IOException;
}

class L_0
    extends LRState {

  static final L_0 instance = new L_0();

  private L_0() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_Stmts:
      return L_89.instance;
    case T_Stmt:
      return L_91.instance;
    default:
      switch(node.getInternalType()) {
        case T_$0:
          return L_1.instance;
        case T_$1:
          return L_11.instance;
        case T_$2:
          return L_20.instance;
        case T_$3:
          return L_22.instance;
        case T_$4:
          return L_24.instance;
        case T_$5:
          return L_26.instance;
        case T_$6:
          return L_28.instance;
        case T_$7:
          return L_30.instance;
        case T_$8:
          return L_32.instance;
        case T_$9:
          return L_34.instance;
        case T_$10:
          return L_36.instance;
        case T_$11:
          return L_38.instance;
        case T_$12:
          return L_40.instance;
        case T_$13:
          return L_42.instance;
        case T_$14:
          return L_44.instance;
        case T_$15:
          return L_46.instance;
        case T_$16:
          return L_48.instance;
        case T_$17:
          return L_50.instance;
        case T_$18:
          return L_57.instance;
        case T_$19:
          return L_59.instance;
        case T_$20:
          return L_61.instance;
        case T_$21:
          return L_63.instance;
        case T_$22:
          return L_65.instance;
        case T_$23:
          return L_67.instance;
        case T_$24:
          return L_69.instance;
        case T_$25:
          return L_71.instance;
        case T_$26:
          return L_73.instance;
        case T_$27:
          return L_75.instance;
        case T_$28:
          return L_77.instance;
        case T_$29:
          return L_79.instance;
        case T_String:
          return L_81.instance;
        case T_$31:
          return L_83.instance;
        case T_$32:
          return L_85.instance;
        case T_$33:
          return L_87.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_1
    extends LRState {

  static final L_1 instance = new L_1();

  private L_1() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_RegExpr:
      return L_3.instance;
    case T_Rd:
      return L_4.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_2.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_2
    extends LRState {

  static final L_2 instance = new L_2();

  private L_2() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NRegister lRegister = (NRegister) stack.pop();

      NRd lRd = new NRd(-1, -1, lRegister);
      stack.push(lRd, stack.getState().getTarget(lRd));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_3
    extends LRState {

  static final L_3 instance = new L_3();

  private L_3() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NRegExpr lRegExpr = (NRegExpr) stack.pop();
      N$0 l$0 = (N$0) stack.pop();

      NStmt_Add lStmt_Add = new NStmt_Add(-1, -1, l$0, lRegExpr);
      stack.push(lStmt_Add, stack.getState().getTarget(lStmt_Add));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_4
    extends LRState {

  static final L_4 instance = new L_4();

  private L_4() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        case T_$34:
          return L_5.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_5
    extends LRState {

  static final L_5 instance = new L_5();

  private L_5() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_Rs:
      return L_7.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_6.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_6
    extends LRState {

  static final L_6 instance = new L_6();

  private L_6() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NRegister lRegister = (NRegister) stack.pop();

      NRs lRs = new NRs(-1, -1, lRegister);
      stack.push(lRs, stack.getState().getTarget(lRs));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_7
    extends LRState {

  static final L_7 instance = new L_7();

  private L_7() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        case T_$34:
          return L_8.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_8
    extends LRState {

  static final L_8 instance = new L_8();

  private L_8() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_Rt:
      return L_10.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_9
    extends LRState {

  static final L_9 instance = new L_9();

  private L_9() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NRegister lRegister = (NRegister) stack.pop();

      NRt lRt = new NRt(-1, -1, lRegister);
      stack.push(lRt, stack.getState().getTarget(lRt));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_10
    extends LRState {

  static final L_10 instance = new L_10();

  private L_10() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NRt lRt = (NRt) stack.pop();
      N$34 l$34$2 = (N$34) stack.pop();
      NRs lRs = (NRs) stack.pop();
      N$34 l$34$1 = (N$34) stack.pop();
      NRd lRd = (NRd) stack.pop();

      NRegExpr lRegExpr = new NRegExpr(-1, -1, lRd, l$34$1, lRs, l$34$2, lRt);
      stack.push(lRegExpr, stack.getState().getTarget(lRegExpr));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_11
    extends LRState {

  static final L_11 instance = new L_11();

  private L_11() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_12.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_12
    extends LRState {

  static final L_12 instance = new L_12();

  private L_12() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$1 l$1 = (N$1) stack.pop();

      NStmt_Addi lStmt_Addi = new NStmt_Addi(-1, -1, l$1, lImmExpr);
      stack.push(lStmt_Addi, stack.getState().getTarget(lStmt_Addi));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_13
    extends LRState {

  static final L_13 instance = new L_13();

  private L_13() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        case T_$34:
          return L_14.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_14
    extends LRState {

  static final L_14 instance = new L_14();

  private L_14() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_Rs:
      return L_15.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_6.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_15
    extends LRState {

  static final L_15 instance = new L_15();

  private L_15() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        case T_$34:
          return L_16.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_16
    extends LRState {

  static final L_16 instance = new L_16();

  private L_16() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_Immediate:
      return L_19.instance;
    default:
      switch(node.getInternalType()) {
        case T_Number:
          return L_17.instance;
        case T_Numberu:
          return L_18.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_17
    extends LRState {

  static final L_17 instance = new L_17();

  private L_17() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NNumber lNumber = (NNumber) stack.pop();

      NImmediate_Signed lImmediate_Signed = new NImmediate_Signed(-1, -1, lNumber);
      stack.push(lImmediate_Signed, stack.getState().getTarget(lImmediate_Signed));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_18
    extends LRState {

  static final L_18 instance = new L_18();

  private L_18() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NNumberu lNumberu = (NNumberu) stack.pop();

      NImmediate_Unsigned lImmediate_Unsigned = new NImmediate_Unsigned(-1, -1, lNumberu);
      stack.push(lImmediate_Unsigned, stack.getState().getTarget(lImmediate_Unsigned));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_19
    extends LRState {

  static final L_19 instance = new L_19();

  private L_19() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmediate lImmediate = (NImmediate) stack.pop();
      N$34 l$34$2 = (N$34) stack.pop();
      NRs lRs = (NRs) stack.pop();
      N$34 l$34$1 = (N$34) stack.pop();
      NRt lRt = (NRt) stack.pop();

      NImmExpr lImmExpr = new NImmExpr(-1, -1, lRt, l$34$1, lRs, l$34$2, lImmediate);
      stack.push(lImmExpr, stack.getState().getTarget(lImmExpr));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_20
    extends LRState {

  static final L_20 instance = new L_20();

  private L_20() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_RegExpr:
      return L_21.instance;
    case T_Rd:
      return L_4.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_2.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_21
    extends LRState {

  static final L_21 instance = new L_21();

  private L_21() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NRegExpr lRegExpr = (NRegExpr) stack.pop();
      N$2 l$2 = (N$2) stack.pop();

      NStmt_Addu lStmt_Addu = new NStmt_Addu(-1, -1, l$2, lRegExpr);
      stack.push(lStmt_Addu, stack.getState().getTarget(lStmt_Addu));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_22
    extends LRState {

  static final L_22 instance = new L_22();

  private L_22() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_23.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_23
    extends LRState {

  static final L_23 instance = new L_23();

  private L_23() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$3 l$3 = (N$3) stack.pop();

      NStmt_Addiu lStmt_Addiu = new NStmt_Addiu(-1, -1, l$3, lImmExpr);
      stack.push(lStmt_Addiu, stack.getState().getTarget(lStmt_Addiu));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_24
    extends LRState {

  static final L_24 instance = new L_24();

  private L_24() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_RegExpr:
      return L_25.instance;
    case T_Rd:
      return L_4.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_2.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_25
    extends LRState {

  static final L_25 instance = new L_25();

  private L_25() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NRegExpr lRegExpr = (NRegExpr) stack.pop();
      N$4 l$4 = (N$4) stack.pop();

      NStmt_Sub lStmt_Sub = new NStmt_Sub(-1, -1, l$4, lRegExpr);
      stack.push(lStmt_Sub, stack.getState().getTarget(lStmt_Sub));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_26
    extends LRState {

  static final L_26 instance = new L_26();

  private L_26() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_RegExpr:
      return L_27.instance;
    case T_Rd:
      return L_4.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_2.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_27
    extends LRState {

  static final L_27 instance = new L_27();

  private L_27() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NRegExpr lRegExpr = (NRegExpr) stack.pop();
      N$5 l$5 = (N$5) stack.pop();

      NStmt_Subu lStmt_Subu = new NStmt_Subu(-1, -1, l$5, lRegExpr);
      stack.push(lStmt_Subu, stack.getState().getTarget(lStmt_Subu));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_28
    extends LRState {

  static final L_28 instance = new L_28();

  private L_28() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_RegExpr:
      return L_29.instance;
    case T_Rd:
      return L_4.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_2.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_29
    extends LRState {

  static final L_29 instance = new L_29();

  private L_29() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NRegExpr lRegExpr = (NRegExpr) stack.pop();
      N$6 l$6 = (N$6) stack.pop();

      NStmt_And lStmt_And = new NStmt_And(-1, -1, l$6, lRegExpr);
      stack.push(lStmt_And, stack.getState().getTarget(lStmt_And));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_30
    extends LRState {

  static final L_30 instance = new L_30();

  private L_30() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_31.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_31
    extends LRState {

  static final L_31 instance = new L_31();

  private L_31() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$7 l$7 = (N$7) stack.pop();

      NStmt_Andi lStmt_Andi = new NStmt_Andi(-1, -1, l$7, lImmExpr);
      stack.push(lStmt_Andi, stack.getState().getTarget(lStmt_Andi));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_32
    extends LRState {

  static final L_32 instance = new L_32();

  private L_32() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_RegExpr:
      return L_33.instance;
    case T_Rd:
      return L_4.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_2.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_33
    extends LRState {

  static final L_33 instance = new L_33();

  private L_33() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NRegExpr lRegExpr = (NRegExpr) stack.pop();
      N$8 l$8 = (N$8) stack.pop();

      NStmt_Or lStmt_Or = new NStmt_Or(-1, -1, l$8, lRegExpr);
      stack.push(lStmt_Or, stack.getState().getTarget(lStmt_Or));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_34
    extends LRState {

  static final L_34 instance = new L_34();

  private L_34() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_35.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_35
    extends LRState {

  static final L_35 instance = new L_35();

  private L_35() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$9 l$9 = (N$9) stack.pop();

      NStmt_Ori lStmt_Ori = new NStmt_Ori(-1, -1, l$9, lImmExpr);
      stack.push(lStmt_Ori, stack.getState().getTarget(lStmt_Ori));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_36
    extends LRState {

  static final L_36 instance = new L_36();

  private L_36() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_RegExpr:
      return L_37.instance;
    case T_Rd:
      return L_4.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_2.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_37
    extends LRState {

  static final L_37 instance = new L_37();

  private L_37() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NRegExpr lRegExpr = (NRegExpr) stack.pop();
      N$10 l$10 = (N$10) stack.pop();

      NStmt_Nor lStmt_Nor = new NStmt_Nor(-1, -1, l$10, lRegExpr);
      stack.push(lStmt_Nor, stack.getState().getTarget(lStmt_Nor));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_38
    extends LRState {

  static final L_38 instance = new L_38();

  private L_38() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_RegExpr:
      return L_39.instance;
    case T_Rd:
      return L_4.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_2.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_39
    extends LRState {

  static final L_39 instance = new L_39();

  private L_39() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NRegExpr lRegExpr = (NRegExpr) stack.pop();
      N$11 l$11 = (N$11) stack.pop();

      NStmt_Xor lStmt_Xor = new NStmt_Xor(-1, -1, l$11, lRegExpr);
      stack.push(lStmt_Xor, stack.getState().getTarget(lStmt_Xor));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_40
    extends LRState {

  static final L_40 instance = new L_40();

  private L_40() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_41.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_41
    extends LRState {

  static final L_41 instance = new L_41();

  private L_41() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$12 l$12 = (N$12) stack.pop();

      NStmt_Xori lStmt_Xori = new NStmt_Xori(-1, -1, l$12, lImmExpr);
      stack.push(lStmt_Xori, stack.getState().getTarget(lStmt_Xori));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_42
    extends LRState {

  static final L_42 instance = new L_42();

  private L_42() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_RegExpr:
      return L_43.instance;
    case T_Rd:
      return L_4.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_2.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_43
    extends LRState {

  static final L_43 instance = new L_43();

  private L_43() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NRegExpr lRegExpr = (NRegExpr) stack.pop();
      N$13 l$13 = (N$13) stack.pop();

      NStmt_Slt lStmt_Slt = new NStmt_Slt(-1, -1, l$13, lRegExpr);
      stack.push(lStmt_Slt, stack.getState().getTarget(lStmt_Slt));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_44
    extends LRState {

  static final L_44 instance = new L_44();

  private L_44() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_45.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_45
    extends LRState {

  static final L_45 instance = new L_45();

  private L_45() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$14 l$14 = (N$14) stack.pop();

      NStmt_Slti lStmt_Slti = new NStmt_Slti(-1, -1, l$14, lImmExpr);
      stack.push(lStmt_Slti, stack.getState().getTarget(lStmt_Slti));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_46
    extends LRState {

  static final L_46 instance = new L_46();

  private L_46() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_47.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_47
    extends LRState {

  static final L_47 instance = new L_47();

  private L_47() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$15 l$15 = (N$15) stack.pop();

      NStmt_Sltu lStmt_Sltu = new NStmt_Sltu(-1, -1, l$15, lImmExpr);
      stack.push(lStmt_Sltu, stack.getState().getTarget(lStmt_Sltu));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_48
    extends LRState {

  static final L_48 instance = new L_48();

  private L_48() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_49.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_49
    extends LRState {

  static final L_49 instance = new L_49();

  private L_49() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$16 l$16 = (N$16) stack.pop();

      NStmt_Sltiu lStmt_Sltiu = new NStmt_Sltiu(-1, -1, l$16, lImmExpr);
      stack.push(lStmt_Sltiu, stack.getState().getTarget(lStmt_Sltiu));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_50
    extends LRState {

  static final L_50 instance = new L_50();

  private L_50() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_Shift:
      return L_51.instance;
    case T_Rd:
      return L_52.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_2.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_51
    extends LRState {

  static final L_51 instance = new L_51();

  private L_51() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NShift lShift = (NShift) stack.pop();
      N$17 l$17 = (N$17) stack.pop();

      NStmt_Sll lStmt_Sll = new NStmt_Sll(-1, -1, l$17, lShift);
      stack.push(lStmt_Sll, stack.getState().getTarget(lStmt_Sll));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_52
    extends LRState {

  static final L_52 instance = new L_52();

  private L_52() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        case T_$34:
          return L_53.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_53
    extends LRState {

  static final L_53 instance = new L_53();

  private L_53() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_Rt:
      return L_54.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_54
    extends LRState {

  static final L_54 instance = new L_54();

  private L_54() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        case T_$34:
          return L_55.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_55
    extends LRState {

  static final L_55 instance = new L_55();

  private L_55() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_Immediate:
      return L_56.instance;
    default:
      switch(node.getInternalType()) {
        case T_Number:
          return L_17.instance;
        case T_Numberu:
          return L_18.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_56
    extends LRState {

  static final L_56 instance = new L_56();

  private L_56() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmediate lImmediate = (NImmediate) stack.pop();
      N$34 l$34$2 = (N$34) stack.pop();
      NRt lRt = (NRt) stack.pop();
      N$34 l$34$1 = (N$34) stack.pop();
      NRd lRd = (NRd) stack.pop();

      NShift lShift = new NShift(-1, -1, lRd, l$34$1, lRt, l$34$2, lImmediate);
      stack.push(lShift, stack.getState().getTarget(lShift));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_57
    extends LRState {

  static final L_57 instance = new L_57();

  private L_57() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_Shift:
      return L_58.instance;
    case T_Rd:
      return L_52.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_2.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_58
    extends LRState {

  static final L_58 instance = new L_58();

  private L_58() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NShift lShift = (NShift) stack.pop();
      N$18 l$18 = (N$18) stack.pop();

      NStmt_Srl lStmt_Srl = new NStmt_Srl(-1, -1, l$18, lShift);
      stack.push(lStmt_Srl, stack.getState().getTarget(lStmt_Srl));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_59
    extends LRState {

  static final L_59 instance = new L_59();

  private L_59() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_60.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_60
    extends LRState {

  static final L_60 instance = new L_60();

  private L_60() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$19 l$19 = (N$19) stack.pop();

      NStmt_Beq lStmt_Beq = new NStmt_Beq(-1, -1, l$19, lImmExpr);
      stack.push(lStmt_Beq, stack.getState().getTarget(lStmt_Beq));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_61
    extends LRState {

  static final L_61 instance = new L_61();

  private L_61() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_62.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_62
    extends LRState {

  static final L_62 instance = new L_62();

  private L_62() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$20 l$20 = (N$20) stack.pop();

      NStmt_Bne lStmt_Bne = new NStmt_Bne(-1, -1, l$20, lImmExpr);
      stack.push(lStmt_Bne, stack.getState().getTarget(lStmt_Bne));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_63
    extends LRState {

  static final L_63 instance = new L_63();

  private L_63() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_64.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_64
    extends LRState {

  static final L_64 instance = new L_64();

  private L_64() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$21 l$21 = (N$21) stack.pop();

      NStmt_Lbu lStmt_Lbu = new NStmt_Lbu(-1, -1, l$21, lImmExpr);
      stack.push(lStmt_Lbu, stack.getState().getTarget(lStmt_Lbu));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_65
    extends LRState {

  static final L_65 instance = new L_65();

  private L_65() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_66.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_66
    extends LRState {

  static final L_66 instance = new L_66();

  private L_66() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$22 l$22 = (N$22) stack.pop();

      NStmt_Lhu lStmt_Lhu = new NStmt_Lhu(-1, -1, l$22, lImmExpr);
      stack.push(lStmt_Lhu, stack.getState().getTarget(lStmt_Lhu));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_67
    extends LRState {

  static final L_67 instance = new L_67();

  private L_67() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_68.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_68
    extends LRState {

  static final L_68 instance = new L_68();

  private L_68() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$23 l$23 = (N$23) stack.pop();

      NStmt_Ll lStmt_Ll = new NStmt_Ll(-1, -1, l$23, lImmExpr);
      stack.push(lStmt_Ll, stack.getState().getTarget(lStmt_Ll));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_69
    extends LRState {

  static final L_69 instance = new L_69();

  private L_69() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_70.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_70
    extends LRState {

  static final L_70 instance = new L_70();

  private L_70() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$24 l$24 = (N$24) stack.pop();

      NStmt_Lui lStmt_Lui = new NStmt_Lui(-1, -1, l$24, lImmExpr);
      stack.push(lStmt_Lui, stack.getState().getTarget(lStmt_Lui));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_71
    extends LRState {

  static final L_71 instance = new L_71();

  private L_71() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_72.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_72
    extends LRState {

  static final L_72 instance = new L_72();

  private L_72() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$25 l$25 = (N$25) stack.pop();

      NStmt_Lw lStmt_Lw = new NStmt_Lw(-1, -1, l$25, lImmExpr);
      stack.push(lStmt_Lw, stack.getState().getTarget(lStmt_Lw));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_73
    extends LRState {

  static final L_73 instance = new L_73();

  private L_73() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_74.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_74
    extends LRState {

  static final L_74 instance = new L_74();

  private L_74() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$26 l$26 = (N$26) stack.pop();

      NStmt_Sb lStmt_Sb = new NStmt_Sb(-1, -1, l$26, lImmExpr);
      stack.push(lStmt_Sb, stack.getState().getTarget(lStmt_Sb));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_75
    extends LRState {

  static final L_75 instance = new L_75();

  private L_75() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_76.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_76
    extends LRState {

  static final L_76 instance = new L_76();

  private L_76() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$27 l$27 = (N$27) stack.pop();

      NStmt_Sc lStmt_Sc = new NStmt_Sc(-1, -1, l$27, lImmExpr);
      stack.push(lStmt_Sc, stack.getState().getTarget(lStmt_Sc));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_77
    extends LRState {

  static final L_77 instance = new L_77();

  private L_77() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_78.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_78
    extends LRState {

  static final L_78 instance = new L_78();

  private L_78() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$28 l$28 = (N$28) stack.pop();

      NStmt_Sh lStmt_Sh = new NStmt_Sh(-1, -1, l$28, lImmExpr);
      stack.push(lStmt_Sh, stack.getState().getTarget(lStmt_Sh));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_79
    extends LRState {

  static final L_79 instance = new L_79();

  private L_79() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_ImmExpr:
      return L_80.instance;
    case T_Rt:
      return L_13.instance;
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_9.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_80
    extends LRState {

  static final L_80 instance = new L_80();

  private L_80() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NImmExpr lImmExpr = (NImmExpr) stack.pop();
      N$29 l$29 = (N$29) stack.pop();

      NStmt_Sw lStmt_Sw = new NStmt_Sw(-1, -1, l$29, lImmExpr);
      stack.push(lStmt_Sw, stack.getState().getTarget(lStmt_Sw));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_81
    extends LRState {

  static final L_81 instance = new L_81();

  private L_81() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        case T_$30:
          return L_82.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_82
    extends LRState {

  static final L_82 instance = new L_82();

  private L_82() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      N$30 l$30 = (N$30) stack.pop();
      NString lString = (NString) stack.pop();

      NStmt_Lbl lStmt_Lbl = new NStmt_Lbl(-1, -1, lString, l$30);
      stack.push(lStmt_Lbl, stack.getState().getTarget(lStmt_Lbl));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_83
    extends LRState {

  static final L_83 instance = new L_83();

  private L_83() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        case T_String:
          return L_84.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_84
    extends LRState {

  static final L_84 instance = new L_84();

  private L_84() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NString lString = (NString) stack.pop();
      N$31 l$31 = (N$31) stack.pop();

      NStmt_Jmp lStmt_Jmp = new NStmt_Jmp(-1, -1, l$31, lString);
      stack.push(lStmt_Jmp, stack.getState().getTarget(lStmt_Jmp));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_85
    extends LRState {

  static final L_85 instance = new L_85();

  private L_85() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        case T_Register:
          return L_86.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_86
    extends LRState {

  static final L_86 instance = new L_86();

  private L_86() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NRegister lRegister = (NRegister) stack.pop();
      N$32 l$32 = (N$32) stack.pop();

      NStmt_Jmpreg lStmt_Jmpreg = new NStmt_Jmpreg(-1, -1, l$32, lRegister);
      stack.push(lStmt_Jmpreg, stack.getState().getTarget(lStmt_Jmpreg));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_87
    extends LRState {

  static final L_87 instance = new L_87();

  private L_87() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        case T_String:
          return L_88.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_88
    extends LRState {

  static final L_88 instance = new L_88();

  private L_88() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NString lString = (NString) stack.pop();
      N$33 l$33 = (N$33) stack.pop();

      NStmt_Jmllnk lStmt_Jmllnk = new NStmt_Jmllnk(-1, -1, l$33, lString);
      stack.push(lStmt_Jmllnk, stack.getState().getTarget(lStmt_Jmllnk));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_89
    extends LRState {

  static final L_89 instance = new L_89();

  private L_89() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      parser.shift();
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        case TEnd:
          return L_90.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_90
    extends LRState {

  static final L_90 instance = new L_90();

  private L_90() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      End l$end = (End) stack.pop();
      NStmts l$1 = (NStmts) stack.pop();

      return l$1;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_91
    extends LRState {

  static final L_91 instance = new L_91();

  private L_91() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    // LR(1) decisions
    if (parser.look(1).getInternalType() == Node.InternalType.T_$0) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$1) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$2) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$3) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$4) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$5) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$6) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$7) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$8) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$9) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$10) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$11) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$12) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$13) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$14) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$15) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$16) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$17) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$18) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$19) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$20) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$21) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$22) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$23) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$24) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$25) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$26) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$27) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$28) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$29) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_String) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$31) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$32) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.T_$33) {
      parser.shift();
      return null;
    }
    if (parser.look(1).getInternalType() == Node.InternalType.TEnd) {
      ParseStack stack = parser.getStack();

      NStmt lStmt = (NStmt) stack.pop();

      NStmts_One lStmts_One = new NStmts_One(-1, -1, lStmt);
      stack.push(lStmts_One, stack.getState().getTarget(lStmts_One));
      return null;
    }
    parser.shift();
    return null;
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    case T_Stmts:
      return L_92.instance;
    case T_Stmt:
      return L_91.instance;
    default:
      switch(node.getInternalType()) {
        case T_$0:
          return L_1.instance;
        case T_$1:
          return L_11.instance;
        case T_$2:
          return L_20.instance;
        case T_$3:
          return L_22.instance;
        case T_$4:
          return L_24.instance;
        case T_$5:
          return L_26.instance;
        case T_$6:
          return L_28.instance;
        case T_$7:
          return L_30.instance;
        case T_$8:
          return L_32.instance;
        case T_$9:
          return L_34.instance;
        case T_$10:
          return L_36.instance;
        case T_$11:
          return L_38.instance;
        case T_$12:
          return L_40.instance;
        case T_$13:
          return L_42.instance;
        case T_$14:
          return L_44.instance;
        case T_$15:
          return L_46.instance;
        case T_$16:
          return L_48.instance;
        case T_$17:
          return L_50.instance;
        case T_$18:
          return L_57.instance;
        case T_$19:
          return L_59.instance;
        case T_$20:
          return L_61.instance;
        case T_$21:
          return L_63.instance;
        case T_$22:
          return L_65.instance;
        case T_$23:
          return L_67.instance;
        case T_$24:
          return L_69.instance;
        case T_$25:
          return L_71.instance;
        case T_$26:
          return L_73.instance;
        case T_$27:
          return L_75.instance;
        case T_$28:
          return L_77.instance;
        case T_$29:
          return L_79.instance;
        case T_String:
          return L_81.instance;
        case T_$31:
          return L_83.instance;
        case T_$32:
          return L_85.instance;
        case T_$33:
          return L_87.instance;
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}

class L_92
    extends LRState {

  static final L_92 instance = new L_92();

  private L_92() {
  }

  @Override
  Node apply(Parser parser)
      throws ParserException, LexerException, IOException {

    // LR(0) decisions
    {
      ParseStack stack = parser.getStack();

      NStmts lStmts = (NStmts) stack.pop();
      NStmt lStmt = (NStmt) stack.pop();

      NStmts_Many lStmts_Many = new NStmts_Many(-1, -1, lStmt, lStmts);
      stack.push(lStmts_Many, stack.getState().getTarget(lStmts_Many));
      return null;
    }
  }

  @Override
  LRState getTarget(Node node)
      throws ParserException, LexerException, IOException {

    switch(node.getProductionType()) {
    default:
      switch(node.getInternalType()) {
        default:
          throw new ParserException((Token) node);
      }
    }
  }
}
